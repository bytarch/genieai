"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1601],{"(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-KFBOBJHC.mjs":(t,e,r)=>{r.d(e,{m:()=>o});var a=r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6DBFFHIP.mjs"),o=class{constructor(t){this.init=t,this.records=this.init()}static{(0,a.K2)(this,"ImperativeState")}reset(){this.records=this.init()}}},"(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-TMUBEWPD.mjs":(t,e,r)=>{function a(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}r.d(e,{S:()=>a}),(0,r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6DBFFHIP.mjs").K2)(a,"populateCommonDb")},"(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/gitGraphDiagram-NRZ2UAAF.mjs":(t,e,r)=>{r.d(e,{diagram:()=>ty});var a=r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-TMUBEWPD.mjs"),o=r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-KFBOBJHC.mjs"),i=r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7DKRZKHE.mjs"),s=r("(app-pages-browser)/./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6DBFFHIP.mjs"),c=r("(app-pages-browser)/./node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs"),n=r("(app-pages-browser)/./node_modules/d3/src/index.js"),d={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},m=s.UI.gitGraph,h=(0,s.K2)(()=>(0,i.$t)({...m,...(0,s.zj)().gitGraph}),"getConfig"),l=new o.m(()=>{let t=h(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function $(){return(0,i.yT)({length:7})}function p(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let o=e(a);return r[o]||(r[o]=!0,t.push(a)),t},[])}(0,s.K2)($,"getID"),(0,s.K2)(p,"uniqBy");var g=(0,s.K2)(function(t){l.records.direction=t},"setDirection"),y=(0,s.K2)(function(t){s.Rm.debug("options str",t),t=(t=t?.trim())||"{}";try{l.records.options=JSON.parse(t)}catch(t){s.Rm.error("error while parsing gitGraph options",t.message)}},"setOptions"),u=(0,s.K2)(function(){return l.records.options},"getOptions"),x=(0,s.K2)(function(t){let e=t.msg,r=t.id,a=t.type,o=t.tags;s.Rm.info("commit",e,r,a,o),s.Rm.debug("Entering commit:",e,r,a,o);let i=h();r=s.Y2.sanitizeText(r,i),e=s.Y2.sanitizeText(e,i),o=o?.map(t=>s.Y2.sanitizeText(t,i));let c={id:r||l.records.seq+"-"+$(),message:e,seq:l.records.seq++,type:a??d.NORMAL,tags:o??[],parents:null==l.records.head?[]:[l.records.head.id],branch:l.records.currBranch};l.records.head=c,s.Rm.info("main branch",i.mainBranchName),l.records.commits.set(c.id,c),l.records.branches.set(l.records.currBranch,c.id),s.Rm.debug("in pushCommit "+c.id)},"commit"),f=(0,s.K2)(function(t){let e=t.name,r=t.order;if(e=s.Y2.sanitizeText(e,h()),l.records.branches.has(e))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);l.records.branches.set(e,null!=l.records.head?l.records.head.id:null),l.records.branchConfig.set(e,{name:e,order:r}),B(e),s.Rm.debug("in createBranch")},"branch"),b=(0,s.K2)(t=>{let e=t.branch,r=t.id,a=t.type,o=t.tags,i=h();e=s.Y2.sanitizeText(e,i),r&&(r=s.Y2.sanitizeText(r,i));let c=l.records.branches.get(l.records.currBranch),n=l.records.branches.get(e),m=c?l.records.commits.get(c):void 0,p=n?l.records.commits.get(n):void 0;if(m&&p&&m.branch===e)throw Error(`Cannot merge branch '${e}' into itself.`);if(l.records.currBranch===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===m||!m){let t=Error(`Incorrect usage of "merge". Current branch (${l.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!l.records.branches.has(e)){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===p||!p){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(m===p){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&l.records.commits.has(r)){let t=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${a} ${o?.join(" ")}`,token:`merge ${e} ${r} ${a} ${o?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${o?.join(" ")}`]},t}let g={id:r||`${l.records.seq}-${$()}`,message:`merged branch ${e} into ${l.records.currBranch}`,seq:l.records.seq++,parents:null==l.records.head?[]:[l.records.head.id,n||""],branch:l.records.currBranch,type:d.MERGE,customType:a,customId:!!r,tags:o??[]};l.records.head=g,l.records.commits.set(g.id,g),l.records.branches.set(l.records.currBranch,g.id),s.Rm.debug(l.records.branches),s.Rm.debug("in mergeBranch")},"merge"),w=(0,s.K2)(function(t){let e=t.id,r=t.targetId,a=t.tags,o=t.parent;s.Rm.debug("Entering cherryPick:",e,r,a);let i=h();if(e=s.Y2.sanitizeText(e,i),r=s.Y2.sanitizeText(r,i),a=a?.map(t=>s.Y2.sanitizeText(t,i)),o=s.Y2.sanitizeText(o,i),!e||!l.records.commits.has(e)){let t=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c=l.records.commits.get(e);if(void 0===c||!c)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(c.parents)&&c.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let n=c.branch;if(c.type===d.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!l.records.commits.has(r)){if(n===l.records.currBranch){let t=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=l.records.branches.get(l.records.currBranch);if(void 0===t||!t){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${l.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=l.records.commits.get(t);if(void 0===i||!i){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${l.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let m={id:l.records.seq+"-"+$(),message:`cherry-picked ${c?.message} into ${l.records.currBranch}`,seq:l.records.seq++,parents:null==l.records.head?[]:[l.records.head.id,c.id],branch:l.records.currBranch,type:d.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${c.id}${c.type===d.MERGE?`|parent:${o}`:""}`]};l.records.head=m,l.records.commits.set(m.id,m),l.records.branches.set(l.records.currBranch,m.id),s.Rm.debug(l.records.branches),s.Rm.debug("in cherryPick")}},"cherryPick"),B=(0,s.K2)(function(t){if(t=s.Y2.sanitizeText(t,h()),l.records.branches.has(t)){l.records.currBranch=t;let e=l.records.branches.get(l.records.currBranch);void 0!==e&&e?l.records.head=l.records.commits.get(e)??null:l.records.head=null}else{let e=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function E(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function k(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){t===e?r+="	*":r+="	|"});let a=[r,e.id,e.seq];for(let t in l.records.branches)l.records.branches.get(t)===e.id&&a.push(t);if(s.Rm.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=l.records.commits.get(e.parents[0]);E(t,e,r),e.parents[1]&&t.push(l.records.commits.get(e.parents[1]))}else if(0==e.parents.length)return;else if(e.parents[0]){let r=l.records.commits.get(e.parents[0]);E(t,e,r)}k(t=p(t,t=>t.id))}(0,s.K2)(E,"upsert"),(0,s.K2)(k,"prettyPrintCommitHistory");var C=(0,s.K2)(function(){s.Rm.debug(l.records.commits),k([R()[0]])},"prettyPrint"),T=(0,s.K2)(function(){l.reset(),(0,s.IU)()},"clear"),L=(0,s.K2)(function(){return[...l.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),K=(0,s.K2)(function(){return l.records.branches},"getBranches"),M=(0,s.K2)(function(){return l.records.commits},"getCommits"),R=(0,s.K2)(function(){let t=[...l.records.commits.values()];return t.forEach(function(t){s.Rm.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),v={commitType:d,getConfig:h,setDirection:g,setOptions:y,getOptions:u,commit:x,branch:f,merge:b,cherryPick:w,checkout:B,prettyPrint:C,clear:T,getBranchesAsObjArray:L,getBranches:K,getCommits:M,getCommitsArray:R,getCurrentBranch:(0,s.K2)(function(){return l.records.currBranch},"getCurrentBranch"),getDirection:(0,s.K2)(function(){return l.records.direction},"getDirection"),getHead:(0,s.K2)(function(){return l.records.head},"getHead"),setAccTitle:s.SV,getAccTitle:s.iN,getAccDescription:s.m7,setAccDescription:s.EI,setDiagramTitle:s.ke,getDiagramTitle:s.ab},P=(0,s.K2)((t,e)=>{for(let r of((0,a.S)(t,e),t.dir&&e.setDirection(t.dir),t.statements))I(r,e)},"populate"),I=(0,s.K2)((t,e)=>{let r={Commit:(0,s.K2)(t=>e.commit(A(t)),"Commit"),Branch:(0,s.K2)(t=>e.branch(G(t)),"Branch"),Merge:(0,s.K2)(t=>e.merge(H(t)),"Merge"),Checkout:(0,s.K2)(t=>e.checkout(O(t)),"Checkout"),CherryPicking:(0,s.K2)(t=>e.cherryPick(D(t)),"CherryPicking")}[t.$type];r?r(t):s.Rm.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),A=(0,s.K2)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?d[t.type]:d.NORMAL,tags:t.tags??void 0}),"parseCommit"),G=(0,s.K2)(t=>({name:t.name,order:t.order??0}),"parseBranch"),H=(0,s.K2)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?d[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),O=(0,s.K2)(t=>t.branch,"parseCheckout"),D=(0,s.K2)(t=>({id:t.id,targetId:"",tags:t.tags?.length===0?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),q={parse:(0,s.K2)(async t=>{let e=await (0,c.qg)("gitGraph",t);s.Rm.debug(e),P(e,v)},"parse")},j=(0,s.D7)(),_=j?.gitGraph,z=new Map,S=new Map,Y=new Map,F=[],N=0,W="LR",U=(0,s.K2)(()=>{z.clear(),S.clear(),Y.clear(),N=0,F=[],W="LR"},"clear"),V=(0,s.K2)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),J=(0,s.K2)(t=>{let e,r,a;return"BT"===W?(r=(0,s.K2)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,s.K2)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let o="TB"===W||"BT"==W?S.get(t)?.y:S.get(t)?.x;void 0!==o&&r(o,a)&&(e=t,a=o)}),e},"findClosestParent"),Z=(0,s.K2)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=S.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),Q=(0,s.K2)((t,e,r)=>{let a=r,o=r,i=[];t.forEach(t=>{let r=e.get(t);if(!r)throw Error(`Commit not found for key ${t}`);r.parents.length?o=Math.max(a=tt(r),o):i.push(r),te(r,a)}),a=o,i.forEach(t=>{tr(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=Z(r.parents);(a=S.get(t).y-40)<=o&&(o=a);let e=z.get(r.branch).pos,i=a-10;S.set(r.id,{x:e,y:i})}})},"setParallelBTPos"),X=(0,s.K2)(t=>{let e=J(t.parents.filter(t=>null!==t));if(!e)throw Error(`Closest parent not found for commit ${t.id}`);let r=S.get(e)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),tt=(0,s.K2)(t=>X(t)+40,"calculateCommitPosition"),te=(0,s.K2)((t,e)=>{let r=z.get(t.branch);if(!r)throw Error(`Branch not found for commit ${t.id}`);let a=r.pos,o=e+10;return S.set(t.id,{x:a,y:o}),{x:a,y:o}},"setCommitPosition"),tr=(0,s.K2)((t,e,r)=>{let a=z.get(t.branch);if(!a)throw Error(`Branch not found for commit ${t.id}`);let o=a.pos;S.set(t.id,{x:o,y:e+r})},"setRootPosition"),ta=(0,s.K2)((t,e,r,a,o,i)=>{if(i===d.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${o%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${o%8} ${a}-inner`);else if(i===d.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let s=t.append("circle");if(s.attr("cx",r.x),s.attr("cy",r.y),s.attr("r",e.type===d.MERGE?9:10),s.attr("class",`commit ${e.id} commit${o%8}`),i===d.MERGE){let i=t.append("circle");i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",6),i.attr("class",`commit ${a} ${e.id} commit${o%8}`)}i===d.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${o%8}`)}},"drawCommitBullet"),to=(0,s.K2)((t,e,r,a)=>{if(e.type!==d.CHERRY_PICK&&(e.customId&&e.type===d.MERGE||e.type!==d.MERGE)&&_?.showCommitLabel){let o=t.append("g"),i=o.insert("rect").attr("class","commit-label-bkg"),s=o.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),c=s.node()?.getBBox();if(c&&(i.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===W||"BT"===W?(i.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),s.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):s.attr("x",r.posWithOffset-c.width/2),_.rotateCommitLabel)){if("TB"===W||"BT"===W)s.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),i.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(c.width+10)/25*9.5,e=10+c.width/25*8.5;o.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}}},"drawCommitLabel"),ti=(0,s.K2)((t,e,r,a)=>{if(e.tags.length>0){let o=0,i=0,s=0,c=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),n=t.append("circle"),d=t.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(a),m=d.node()?.getBBox();if(!m)throw Error("Tag bbox not found");i=Math.max(i,m.width),s=Math.max(s,m.height),d.attr("x",r.posWithOffset-m.width/2),c.push({tag:d,hole:n,rect:e,yOffset:o}),o+=20}for(let{tag:t,hole:e,rect:o,yOffset:n}of c){let c=s/2,d=r.y-19.2-n;if(o.attr("class","tag-label-bkg").attr("points",`
      ${a-i/2-2},${d+2}  
      ${a-i/2-2},${d-2}
      ${r.posWithOffset-i/2-4},${d-c-2}
      ${r.posWithOffset+i/2+4},${d-c-2}
      ${r.posWithOffset+i/2+4},${d+c+2}
      ${r.posWithOffset-i/2-4},${d+c+2}`),e.attr("cy",d).attr("cx",a-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===W||"BT"===W){let s=a+n;o.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${s+2}
        ${r.x},${s-2}
        ${r.x+10},${s-c-2}
        ${r.x+10+i+4},${s-c-2}
        ${r.x+10+i+4},${s+c+2}
        ${r.x+10},${s+c+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),ts=(0,s.K2)(t=>{switch(t.customType??t.type){case d.NORMAL:return"commit-normal";case d.REVERSE:return"commit-reverse";case d.HIGHLIGHT:return"commit-highlight";case d.MERGE:return"commit-merge";case d.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),tc=(0,s.K2)((t,e,r,a)=>{let o={x:0,y:0};if(t.parents.length>0){let r=J(t.parents);if(r){let i=a.get(r)??o;return"TB"===e?i.y+40:"BT"===e?(a.get(t.id)??o).y-40:i.x+40}}else{if("TB"===e)return 30;if("BT"===e)return(a.get(t.id)??o).y-40}return 0},"calculatePosition"),tn=(0,s.K2)((t,e,r)=>{let a="BT"===W&&r?e:e+10,o="TB"===W||"BT"===W?a:z.get(t.branch)?.pos,i="TB"===W||"BT"===W?z.get(t.branch)?.pos:a;if(void 0===i||void 0===o)throw Error(`Position were undefined for commit ${t.id}`);return{x:i,y:o,posWithOffset:a}},"getCommitPosition"),td=(0,s.K2)((t,e,r)=>{if(!_)throw Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels"),i="TB"===W||"BT"===W?30:0,c=[...e.keys()],n=_?.parallelCommits??!1,d=c.sort((0,s.K2)((t,r)=>{let a=e.get(t)?.seq,o=e.get(r)?.seq;return void 0!==a&&void 0!==o?a-o:0},"sortKeys"));"BT"===W&&(n&&Q(d,e,i),d=d.reverse()),d.forEach(t=>{let s=e.get(t);if(!s)throw Error(`Commit not found for key ${t}`);n&&(i=tc(s,W,i,S));let c=tn(s,i,n);if(r){let t=ts(s),e=s.customType??s.type,r=z.get(s.branch)?.index??0;ta(a,s,c,t,r,e),to(o,s,c,i),ti(o,s,c,i)}"TB"===W||"BT"===W?S.set(s.id,{x:c.x,y:c.posWithOffset}):S.set(s.id,{x:c.posWithOffset,y:c.y}),(i="BT"===W&&n?i+40:i+40+10)>N&&(N=i)})},"drawCommits"),tm=(0,s.K2)((t,e,r,a,o)=>{let i=("TB"===W||"BT"===W?r.x<a.x:r.y<a.y)?e.branch:t.branch,c=(0,s.K2)(t=>t.branch===i,"isOnBranchToGetCurve"),n=(0,s.K2)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...o.values()].some(t=>n(t)&&c(t))},"shouldRerouteArrow"),th=(0,s.K2)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(F.every(t=>Math.abs(t-a)>=10))return F.push(a),a;let o=Math.abs(t-e);return th(t,e-o/5,r+1)},"findLane"),tl=(0,s.K2)((t,e,r,a)=>{let o;let i=S.get(e.id),s=S.get(r.id);if(void 0===i||void 0===s)throw Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let c=tm(e,r,i,s,a),n="",m="",h=0,l=0,$=z.get(r.branch)?.index;if(r.type===d.MERGE&&e.id!==r.parents[0]&&($=z.get(e.branch)?.index),c){n="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",h=10,l=10;let t=i.y<s.y?th(i.y,s.y):th(s.y,i.y),r=i.x<s.x?th(i.x,s.x):th(s.x,i.x);"TB"===W?i.x<s.x?o=`M ${i.x} ${i.y} L ${r-h} ${i.y} ${m} ${r} ${i.y+l} L ${r} ${s.y-h} ${n} ${r+l} ${s.y} L ${s.x} ${s.y}`:($=z.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+h} ${i.y} ${n} ${r} ${i.y+l} L ${r} ${s.y-h} ${m} ${r-l} ${s.y} L ${s.x} ${s.y}`):"BT"===W?i.x<s.x?o=`M ${i.x} ${i.y} L ${r-h} ${i.y} ${n} ${r} ${i.y-l} L ${r} ${s.y+h} ${m} ${r+l} ${s.y} L ${s.x} ${s.y}`:($=z.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+h} ${i.y} ${m} ${r} ${i.y-l} L ${r} ${s.y+h} ${n} ${r-l} ${s.y} L ${s.x} ${s.y}`):i.y<s.y?o=`M ${i.x} ${i.y} L ${i.x} ${t-h} ${n} ${i.x+l} ${t} L ${s.x-h} ${t} ${m} ${s.x} ${t+l} L ${s.x} ${s.y}`:($=z.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${i.x} ${t+h} ${m} ${i.x+l} ${t} L ${s.x-h} ${t} ${n} ${s.x} ${t-l} L ${s.x} ${s.y}`)}else n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,l=20,"TB"===W?(i.x<s.x&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${s.y-h} ${n} ${i.x+l} ${s.y} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${s.x-h} ${i.y} ${m} ${s.x} ${i.y+l} L ${s.x} ${s.y}`),i.x>s.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,l=20,o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${s.y-h} ${m} ${i.x-l} ${s.y} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${s.x+h} ${i.y} ${n} ${s.x} ${i.y+l} L ${s.x} ${s.y}`),i.x===s.x&&(o=`M ${i.x} ${i.y} L ${s.x} ${s.y}`)):"BT"===W?(i.x<s.x&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${s.y+h} ${m} ${i.x+l} ${s.y} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${s.x-h} ${i.y} ${n} ${s.x} ${i.y-l} L ${s.x} ${s.y}`),i.x>s.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",h=20,l=20,o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${s.y+h} ${n} ${i.x-l} ${s.y} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${s.x-h} ${i.y} ${n} ${s.x} ${i.y-l} L ${s.x} ${s.y}`),i.x===s.x&&(o=`M ${i.x} ${i.y} L ${s.x} ${s.y}`)):(i.y<s.y&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${s.x-h} ${i.y} ${m} ${s.x} ${i.y+l} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${i.x} ${s.y-h} ${n} ${i.x+l} ${s.y} L ${s.x} ${s.y}`),i.y>s.y&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${s.x-h} ${i.y} ${n} ${s.x} ${i.y-l} L ${s.x} ${s.y}`:`M ${i.x} ${i.y} L ${i.x} ${s.y+h} ${m} ${i.x+l} ${s.y} L ${s.x} ${s.y}`),i.y===s.y&&(o=`M ${i.x} ${i.y} L ${s.x} ${s.y}`));if(void 0===o)throw Error("Line definition not found");t.append("path").attr("d",o).attr("class","arrow arrow"+$%8)},"drawArrow"),t$=(0,s.K2)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{tl(r,e.get(t),a,e)})})},"drawArrows"),tp=(0,s.K2)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,o=z.get(t.name)?.pos;if(void 0===o)throw Error(`Position not found for branch ${t.name}`);let i=r.append("line");i.attr("x1",0),i.attr("y1",o),i.attr("x2",N),i.attr("y2",o),i.attr("class","branch branch"+a),"TB"===W?(i.attr("y1",30),i.attr("x1",o),i.attr("y2",N),i.attr("x2",o)):"BT"===W&&(i.attr("y1",N),i.attr("x1",o),i.attr("y2",30),i.attr("x2",o)),F.push(o);let s=V(t.name),c=r.insert("rect"),n=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);n.node().appendChild(s);let d=s.getBBox();c.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(_?.rotateCommitLabel===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),n.attr("transform","translate("+(-d.width-14-(_?.rotateCommitLabel===!0?30:0))+", "+(o-d.height/2-1)+")"),"TB"===W?(c.attr("x",o-d.width/2-10).attr("y",0),n.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===W?(c.attr("x",o-d.width/2-10).attr("y",N),n.attr("transform","translate("+(o-d.width/2-5)+", "+N+")")):c.attr("transform","translate(-19, "+(o-d.height/2)+")")})},"drawBranches"),tg=(0,s.K2)(function(t,e,r,a,o){return z.set(t,{pos:e,index:r}),e+=50+(o?40:0)+("TB"===W||"BT"===W?a.width/2:0)},"setBranchPosition"),ty={parser:q,db:v,renderer:{draw:(0,s.K2)(function(t,e,r,a){if(U(),s.Rm.debug("in gitgraph renderer",t+"\n","id:",e,r),!_)throw Error("GitGraph config not found");let o=_.rotateCommitLabel??!1,c=a.db;Y=c.getCommits();let d=c.getBranchesAsObjArray();W=c.getDirection();let m=(0,n.Ltv)(`[id="${e}"]`),h=0;d.forEach((t,e)=>{let r=V(t.name),a=m.append("g"),i=a.insert("g").attr("class","branchLabel"),s=i.insert("g").attr("class","label branch-label");s.node()?.appendChild(r);let c=r.getBBox();h=tg(t.name,h,e,c,o),s.remove(),i.remove(),a.remove()}),td(m,Y,!1),_.showBranches&&tp(m,d),t$(m,Y),td(m,Y,!0),i._K.insertTitle(m,"gitTitleText",_.titleTopMargin??0,c.getDiagramTitle()),(0,s.mj)(void 0,m,_.diagramPadding,_.useMaxWidth)},"draw")},styles:(0,s.K2)(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles")}}}]);